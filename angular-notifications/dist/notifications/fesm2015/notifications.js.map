{"version":3,"file":"notifications.js","sources":["../../../projects/notifications/src/lib/model/notification-type.enum.ts","../../../projects/notifications/src/lib/notification/notification.component.ts","../../../projects/notifications/src/lib/notification/notification.component.html","../../../projects/notifications/src/lib/notifications.service.ts","../../../projects/notifications/src/lib/notifications-container/notifications-container.component.ts","../../../projects/notifications/src/lib/notifications-container/notifications-container.component.html","../../../projects/notifications/src/lib/notifications.module.ts","../../../projects/notifications/src/public-api.ts","../../../projects/notifications/src/notifications.ts"],"sourcesContent":["export enum NotificationType {\r\n    Success = 'success',\r\n    Error = 'error',\r\n    Alert = 'alert',\r\n    Info = 'info',\r\n    Warn = 'warn'\r\n}","import { Component, Input, OnInit } from '@angular/core';\nimport { NotificationType } from '../model/notification-type.enum';\n\n@Component({\n  selector: 'notification',\n  templateUrl: './notification.component.html',\n  styleUrls: ['./notification.component.css']\n})\nexport class NotificationComponent implements OnInit {\n  @Input() title: string = 'Title'\n  @Input() type: NotificationType = NotificationType.Success\n\n  constructor() { }\n\n  ngOnInit(): void {\n    var Notification = document.getElementById(\"notification\");\n    Notification!.style.transform = \"translateX(150%)\";\n    Notification!.classList.remove(\"hidden\");\n\n    setTimeout(function () {\n        Notification!.style.transform = \"translateX(0%)\";\n    }, 200);\n  }\n\n  public closeModal() {\n    let Notification = document.getElementById(\"notification\");\n    Notification!.style.transform = \"translateX(150%)\";\n  }\n}\n","<div role=\"alert\" class=\"sm:mr-6 mt-16 sm:mt-6 mb-6 sm:mb-0 xl:w-5/12 mx-auto absolute left-0 sm:left-auto right-0 sm:top-0 sm:w-6/12 md:w-3/5 justify-between w-11/12 bg-white dark:bg-gray-800 shadow-lg rounded flex sm:flex-row flex-col transition duration-150 ease-in-out\" id=\"notification\">\n    <div class=\"sm:px-6 p-2 flex mt-4 sm:mt-0 ml-4 sm:ml-0 items-center justify-center sm:rounded-tl sm:rounded-bl w-12 h-12 sm:h-auto sm:w-auto text-white\" [ngClass]=\"{'bg-red-400': (type == 'alert'), 'bg-green-400': (type == 'success')}\">\n        <button class=\"w-8 h-8 focus:outline-none\">\n          <!-- <icons class=\"w-8 h-8 stroke-1 stroke-current\" name=\"menu-off\"></icons> -->\n        </button>\n    </div>\n    <div class=\"flex flex-col justify-center xl:-ml-4 pl-4 xl:pl-1 sm:w-3/5 pt-4 sm:pb-4 pb-2\">\n        <p class=\"text-lg text-gray-800 dark:text-gray-100 font-semibold pb-1\">{{ title }}</p>\n        <p class=\"text-sm text-gray-600 dark:text-gray-400 font-normal\">You have {{ type }}successfully completed the survey. You will soon receive a reward email. Stay tuned.</p>\n    </div>\n    <div class=\"flex sm:flex-col sm:justify-center sm:border-l dark:border-gray-700 items-center border-gray-300 sm:w-1/6 pl-4 sm:pl-0\">\n        <div class=\"sm:pt-4 pb-4 sm:border-b dark:border-gray-700 border-gray-300 sm:w-full flex sm:justify-center\">\n            <span class=\"sm:text-sm text-xs text-green-400 font-bold mr-4 sm:mr-0 cursor-pointer\">View</span>\n        </div>\n        <div class=\"sm:pt-4 pb-4 flex sm:justify-center w-full cursor-pointer\" (click)=\"closeModal()\">\n            <span class=\"sm:text-sm text-xs text-gray-600 dark:text-gray-400 cursor-pointer\">Dismiss</span>\n        </div>\n    </div>\n</div>","import { Injectable } from '@angular/core'\nimport { Notification } from './model/notification.model'\n// import { NotificationType } from './model/notification-type.enum'\nimport { Observable, Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationsService {\n  // https://jasonwatmore.com/post/2019/07/05/angular-8-alert-toaster-notifications\n  private subject = new Subject<Notification>()\n\n  constructor() { }\n\n  onAlert(): Observable<Notification> {\n    return this.subject.asObservable()\n  }\n\n  alert(notification: Notification) {\n    this.subject.next(notification)\n  }\n\n  // set(notification: Notification): Notification {\n  //   // do something with options\n  //   this.addNotification(notification)\n  //   return notification;\n  // }\n\n  // success(title: string = '', content: string = '', type: NotificationType ): Notification {\n  //   return this.set({ title: title, content: content, type: type = NotificationType.Success });\n  // }\n\n  // addNotification(notification: Notification) {\n\n  // }\n\n  // insert(notification: Notification): Observable<any> {\n  //   return new Observable ((observer) => {\n  //       const source$ = this.set(notification)\n  //       source$.subscribe((data: any) => {\n  //           observer.next(data.id)\n  //       }), (error: any) => observer.error(error)\n  //   })\n  // }\n}\n","import { Component, ComponentFactoryResolver, OnInit, ViewChild, ViewContainerRef } from '@angular/core'\nimport { NotificationComponent } from '../notification/notification.component'\nimport { Notification } from '../model/notification.model'\nimport { NotificationsService } from '../notifications.service'\nimport { Observable } from 'rxjs'\n\n@Component({\n  selector: 'notifications-container',\n  templateUrl: './notifications-container.component.html',\n  styleUrls: ['./notifications-container.component.css']\n})\nexport class NotificationsContainerComponent implements OnInit {\n  @ViewChild('notifications', {read: ViewContainerRef}) notifications!: ViewContainerRef\n\n  componentClass = NotificationComponent\n  components: any[] = []\n\n  constructor(private componentFactoryResolver: ComponentFactoryResolver, private _NotificationsService: NotificationsService) {}\n\n  ngOnInit(): void {\n    this._NotificationsService.onAlert().subscribe(data => console.log(data))\n  }\n\n  addNotification(notification: Notification) {\n    // Create component dynamically inside the ng-template\n    const componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.componentClass)\n    const componentRef = this.notifications.createComponent(componentFactory)\n    componentRef.instance.title = notification.title\n    // componentRef.instance.type = notification.type\n    // Push the component so that we can keep track of which components are created\n    this.components.push(componentRef)\n  }\n\n  removeNotification() {\n    // Find the component\n    const component = this.components.find((component: any) => component.instance instanceof this.componentClass)\n    const componentIndex = this.components.indexOf(component)\n\n    if (componentIndex !== -1) {\n      // Remove component from both view and array\n      this.notifications.remove(this.components.length-1)\n      this.components.splice(componentIndex, 1)\n    }\n  }\n\n}\n","<p>notifications-container works!</p>\n<button (click)=\"addNotification({ content: '', title: 'Titel' })\">ADD</button>\n<br>\n<button (click)=\"addNotification({ content: '', title: 'Titel' })\">ADD_Danger</button>\n<br>\n<button (click)=\"removeNotification()\">REMOVE</button>\n<ng-template #notifications>\n\n</ng-template>","import { NgModule } from '@angular/core';\nimport { NotificationsContainerComponent } from './notifications-container/notifications-container.component';\nimport { NotificationComponent } from './notification/notification.component';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NotificationsService } from './notifications.service';\n\n@NgModule({\n  declarations: [\n    NotificationsContainerComponent,\n    NotificationComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  exports: [\n    NotificationsContainerComponent\n  ],providers: [\n    NotificationsService\n  ]\n})\nexport class NotificationsModule { }\n","/*\n * Public API Surface of notifications\n */\n\nexport * from './lib/notifications-container/notifications-container.component'\nexport * from './lib/notification/notification.component'\nexport * from './lib/notifications.service';\nexport * from './lib/notifications.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}